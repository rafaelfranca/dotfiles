#!/bin/bash

# This script is to backport a commit from a branch to another branch.
# It will checkout the target branch, cherry-pick the commit.
#
# If commit is a merge commit, use the -m option.
#
# Branch names matching X.Y pattern (e.g., 7.0, 7.1, 8.0) will be automatically
# converted to X-Y-stable format (e.g., 7-0-stable, 7-1-stable, 8-0-stable).
# Other branch names will be used as-is.
#
# Usage:
#   git-backport <commit> <target-branch>
#   git-backport -m <merge-commit> <target-branch>
#
# Examples:
#   git-backport abc123 7.1          # Backports to 7-1-stable
#   git-backport -m def456 8.0       # Backports merge commit to 8-0-stable
#   git-backport abc123 main         # Backports to main (no transformation)

set -euo pipefail

# Transform branch name: if it matches X.Y pattern, convert to X-Y-stable
# Otherwise, use as-is
transform_branch_name() {
  local branch="$1"
  # Check if branch matches pattern like 7.0, 7.1, 8.0, etc.
  if [[ "$branch" =~ ^[0-9]+\.[0-9]+$ ]]; then
    # Valid X.Y pattern - replace dots with hyphens and append -stable
    echo "${branch//\./-}-stable"
  else
    echo "$branch"
  fi
}

# Show usage information
show_usage() {
  echo "Backport a commit from a branch to another branch."
  echo
  echo "Usage: git-backport [OPTIONS] <commit> <target-branch>"
  echo
  echo "Options:"
  echo "  -m          Specify that the commit is a merge commit"
  echo "  --help      Show this help message"
  echo
  echo "Note: Branch names matching X.Y pattern (e.g., 7.0, 7.1) will be"
  echo "      automatically converted to X-Y-stable format (e.g., 7-0-stable)."
  echo
  echo "Examples:"
  echo "  git-backport abc123 7.1          # Backports to 7-1-stable"
  echo "  git-backport -m def456 8.0       # Backports merge commit to 8-0-stable"
  echo "  git-backport abc123 main         # Backports to main (no transformation)"
}

# Validate required arguments
validate_arguments() {
  if [[ $# -ne 2 ]]; then
    echo "Error: Expected 2 arguments, got $#" >&2
    echo
    show_usage
    exit 1
  fi
}

# Main execution
main() {
  # Parse options
  local is_merge=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --help)
        show_usage
        exit 0
        ;;
      -m)
        is_merge=true
        shift
        ;;
      -*)
        echo "Error: Unknown option: $1" >&2
        echo
        show_usage
        exit 1
        ;;
      *)
        # Hit a non-option argument, stop parsing
        break
        ;;
    esac
  done

  # Validate we have the right number of arguments
  validate_arguments "$@"

  # Extract arguments
  local commit="$1"
  local target_branch
  target_branch=$(transform_branch_name "$2")

  # Perform backport
  echo "Checking out branch: $target_branch"
  git checkout "$target_branch"

  echo "Pulling latest changes..."
  git pull

  echo "Cherry-picking commit: $commit"
  if [[ "$is_merge" == true ]]; then
    git cherry-pick -m 1 "$commit"
  else
    git cherry-pick "$commit"
  fi

  echo "âœ“ Backport completed successfully!"
}

# Run main function with all arguments
main "$@"
